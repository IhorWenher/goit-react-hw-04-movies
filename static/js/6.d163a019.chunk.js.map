{"version":3,"sources":["services/moviesApi.js","components/Searchbar/Searchbar.module.css","components/MoviesListByTitle/MoviesListByTitle.module.css","components/Searchbar/Searchbar.js","components/MoviesListByTitle/MoviesListByTitle.js"," pages/MoviesPage.js"],"names":["BASE_URL","Key","pathName","a","url","fetch","response","ok","json","Promise","reject","Error","query","moviesApi","getMovies","getMoviesBySearch","module","exports","Searchbar","searchValueChange","useState","searchValue","setSearchValue","moviesBySearch","setMoviesBySearch","useEffect","then","results","className","Styles","onSubmit","event","preventDefault","trim","toast","error","SearchForm","type","button","label","input","autoComplete","autoFocus","placeholder","onChange","target","value","toLowerCase","MoviesListByTitle","map","id","title","Style","li","to","defaultProps","MoviesView","movies","handleSearchValue"],"mappings":"sKAAMA,EAAW,+BACXC,EAAM,4C,4CAEZ,WAAyBC,GAAzB,iBAAAC,EAAA,6DACQC,EADR,UACiBJ,GADjB,OAC4BE,GAD5B,OACuCD,GADvC,SAEyBI,MAAMD,GAF/B,YAEQE,EAFR,QAIkBC,GAJlB,iCAKYD,EAASE,OALrB,gDAMMC,QAAQC,OAAO,IAAIC,MAAM,kCAN/B,oF,kEASA,WAAiCC,GAAjC,iBAAAT,EAAA,6DACQC,EADR,UACiBJ,EADjB,wBACyCC,EADzC,kBACsDW,GADtD,SAEyBP,MAAMD,GAF/B,YAEQE,EAFR,QAIkBC,GAJlB,iCAKYD,EAASE,OALrB,gDAMMC,QAAQC,OAAO,IAAIC,MAAM,kCAN/B,oF,sBASA,IAAME,EAAY,CAAEC,U,4CAAWC,kB,6CAEhBF,O,mBCtBfG,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,8BAA8B,OAAS,0BAA0B,MAAQ,yBAAyB,MAAQ,2B,mBCAlLD,EAAOC,QAAU,CAAC,GAAK,gC,0GCyDRC,EAlDG,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBACnB,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAEAC,qBAAU,WACY,KAAhBJ,GACFR,IACGE,kBAAkBM,GAClBK,MAAK,gBAAGC,EAAH,EAAGA,QAAH,OAAiBH,EAAkBG,QAE5C,CAACN,IAgBJ,OACE,qBAAKO,UAAWC,IAAOX,UAAvB,SACE,uBAAMY,SAZW,SAAAC,GACnBA,EAAMC,iBACqB,KAAvBX,EAAYY,OAKhBd,EAAkBI,GAJhBW,IAAMC,MAAM,qBASkBP,UAAWC,IAAOO,WAAhD,UACE,wBAAQC,KAAK,SAAST,UAAWC,IAAOS,OAAxC,SACE,sBAAMV,UAAWC,IAAOU,MAAxB,sBAGF,uBACEX,UAAWC,IAAOW,MAClBH,KAAK,OACLI,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,SA3BiB,SAAAb,GACvBT,EAAeS,EAAMc,OAAOC,MAAMC,wB,wBChBhCC,EAAoB,SAAC,GAAwB,IAAtBzB,EAAqB,EAArBA,eAC3B,OACE,6BACGA,GACCA,EAAe0B,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACjB,oBAAIvB,UAAWwB,IAAMC,GAArB,SACE,cAAC,IAAD,CAAMC,GAAE,kBAAaJ,GAArB,SAA4BC,KADAD,SAQzBF,IAEfA,EAAkBO,aAAe,CAC/BhC,eAAgB,ICAHiC,UAhBI,WACjB,MAA4CpC,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAMA,OACE,qCACE,cAAC,EAAD,CAAWL,kBAAmB,SAAAsC,GAAM,OANd,SAAAA,GACxBjC,EAAkBiC,GAKwBC,CAAkBD,MAC1D,cAAC,IAAD,IACA,cAAC,EAAD,CAAmBlC,eAAgBA","file":"static/js/6.d163a019.chunk.js","sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst Key = '?api_key=f37c49543e0e2e54afc5ecab7f1ff4ce';\n\nasync function getMovies(pathName) {\n  const url = `${BASE_URL}${pathName}${Key}`;\n  const response = await fetch(url);\n\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Can not find images with name'));\n}\n\nasync function getMoviesBySearch(query) {\n  const url = `${BASE_URL}/search/movie${Key}&query=${query}`;\n  const response = await fetch(url);\n\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Can not find images with name'));\n}\n\nconst moviesApi = { getMovies, getMoviesBySearch };\n\nexport default moviesApi;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__DjWH3\",\"SearchForm\":\"Searchbar_SearchForm__1ac2l\",\"button\":\"Searchbar_button__MhnaU\",\"label\":\"Searchbar_label__1BV3w\",\"input\":\"Searchbar_input__2C4aO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"MoviesListByTitle_li__1_-S-\"};","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport moviesApi from '../../services/moviesApi';\nimport Styles from './Searchbar.module.css';\n\nconst Searchbar = ({ searchValueChange }) => {\n  const [searchValue, setSearchValue] = useState('');\n  const [moviesBySearch, setMoviesBySearch] = useState([]);\n\n  useEffect(() => {\n    if (searchValue !== '') {\n      moviesApi\n        .getMoviesBySearch(searchValue)\n        .then(({ results }) => setMoviesBySearch(results));\n    }\n  }, [searchValue]);\n\n  const handleNameChange = event => {\n    setSearchValue(event.target.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (searchValue.trim() === '') {\n      toast.error('Enter something!');\n      return;\n    }\n\n    searchValueChange(moviesBySearch);\n  };\n\n  return (\n    <div className={Styles.Searchbar}>\n      <form onSubmit={handleSubmit} className={Styles.SearchForm}>\n        <button type=\"submit\" className={Styles.button}>\n          <span className={Styles.label}>Search</span>\n        </button>\n\n        <input\n          className={Styles.input}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search Movie\"\n          onChange={handleNameChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nSearchbar.propTypes = {\n  searchValueChange: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Style from './MoviesListByTitle.module.css';\n\nconst MoviesListByTitle = ({ moviesBySearch }) => {\n  return (\n    <ul>\n      {moviesBySearch &&\n        moviesBySearch.map(({ id, title }) => (\n          <li className={Style.li} key={id}>\n            <Link to={`/movies/${id}`}>{title}</Link>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nexport default MoviesListByTitle;\n\nMoviesListByTitle.defaultProps = {\n  moviesBySearch: [],\n};\n\nMoviesListByTitle.propTypes = {\n  moviesBySearch: PropTypes.arrayOf(\n    PropTypes.shape({ title: PropTypes.string }),\n  ),\n};\n","import React, { useState } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport SearchBar from '../components/Searchbar';\nimport MoviesListByTitle from '../components/MoviesListByTitle';\n\nconst MoviesView = () => {\n  const [moviesBySearch, setMoviesBySearch] = useState([]);\n\n  const handleSearchValue = movies => {\n    setMoviesBySearch(movies);\n  };\n\n  return (\n    <>\n      <SearchBar searchValueChange={movies => handleSearchValue(movies)} />\n      <ToastContainer />\n      <MoviesListByTitle moviesBySearch={moviesBySearch} />\n    </>\n  );\n};\n\nexport default MoviesView;\n"],"sourceRoot":""}